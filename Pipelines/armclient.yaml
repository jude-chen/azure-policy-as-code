# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - Policies/*

pool:
  vmImage: windows-latest

steps:
  - checkout: self
    fetchDepth: "5"
    clean: "true"

  - task: AzureCLI@2
    displayName: "Pushing Policies to Azure"
    inputs:
      azureSubscription: "judechen-demo-01(d4253ee0-3b4d-4a02-bfe2-71475e7f4a1f)"
      scriptType: "ps"
      scriptLocation: "inlineScript"
      addSpnToEnvironment: true
      inlineScript: |
        function Get-ModifiedFileList {
          $CurrentBranch = Get-GitBranchName
          if (($CurrentBranch -eq 'main') -or ($CurrentBranch -eq 'master')) {
              Write-Verbose 'Gathering modified files from the pull request' -Verbose
              $Diff = git diff --name-only --diff-filter=AM HEAD^ HEAD
          } else {
              Write-Verbose 'Gathering modified files between current branch and main' -Verbose
              $Diff = git diff --name-only --diff-filter=AM origin/main
              if ($Diff.count -eq 0) {
                  Write-Verbose 'Gathering modified files between current branch and master' -Verbose
                  $Diff = git diff --name-only --diff-filter=AM origin/master
              }
          }
          $ModifiedFiles = $Diff | Get-Item -Force

          return $ModifiedFiles
        }

        function Get-GitBranchName {
            [CmdletBinding()]
            param ()

            # Get branch name from Git
            $BranchName = git branch --show-current

            # If git could not get name, try GitHub variable
            if ([string]::IsNullOrEmpty($BranchName) -and (Test-Path env:GITHUB_REF_NAME)) {
                $BranchName = $env:GITHUB_REF_NAME
            }

            # If git could not get name, try Azure DevOps variable
            if ([string]::IsNullOrEmpty($BranchName) -and (Test-Path env:BUILD_SOURCEBRANCHNAME)) {
                $BranchName = $env:BUILD_SOURCEBRANCHNAME
            }

            return $BranchName
        }

        choco install armclient --source=https://chocolatey.org/api/v2/
        ARMClient.exe spn $env:tenantId $env:servicePrincipalId $env:servicePrincipalKey
        #ARMClient.exe get /subscriptions?api-version=2018-01-01
        ## get the changed files
        $filelist=Get-ModifiedFileList
        $count=$filelist.Length
        Write-Host "Processing $count files"
        For ($i=0; $i -lt $count; $i++) {
          $file=$filelist[$i]
          ## Push policy defitions, assignments, etc.
          Write-Host "Processing file $file"
          if ($file -like "*\Policies\*\*.json")
          {
            $policy_id=$(Get-Content $file -Raw | ConvertFrom-Json).id
            Write-Host "Processing policy $policy_id"
            ARMClient.exe PUT "$id?api-version=2021-09-01" @$file
          }
          else {
            Write-Host "Not a JSON file, skipping file $file"
          }
        }
